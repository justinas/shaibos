#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse

import os

try:
    import shaibos  # noqa pylint: disable=unused-import
except ImportError:
    import sys

    sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), '../'))

    import shaibos  # noqa pylint: disable=unused-import

from shaibos.util.template import default_template_path
from shaibos.load.from_yaml import load_invoices_from_yaml_file
from shaibos.save.to_html import save_html
from shaibos.save.to_pdf import save_pdf
from shaibos.util.log import get_logger

# ---

logger = get_logger()


def export_invoices_to_html(input_yaml, template, output_dir):
    if not os.path.isdir(output_dir):
        os.makedirs(output_dir)

    invoices = load_invoices_from_yaml_file(input_yaml)

    for invoice_number_prefix in invoices:
        for invoice in invoices[invoice_number_prefix]:
            output_html_path = os.path.join(output_dir, invoice.filename_prefix() + '.html')
            save_html(invoice=invoice, template_path=template, output_path=output_html_path)
            logger.info('Saved HTML invoice %s', output_html_path)


def export_invoices_to_pdf(input_yaml, template, output_dir, overwrite):
    if not os.path.isdir(output_dir):
        os.makedirs(output_dir)

    invoices = load_invoices_from_yaml_file(input_yaml)

    for invoice_number_prefix in invoices:
        for invoice in invoices[invoice_number_prefix]:
            output_pdf_path = os.path.join(output_dir, invoice.filename_prefix() + '.pdf')
            if os.path.exists(output_pdf_path) and not overwrite:
                logger.info('Skipping PDF invoice %s', output_pdf_path)
                continue

            save_pdf(invoice=invoice, template_path=template, output_path=output_pdf_path)
            logger.info('Saved PDF invoice %s', output_pdf_path)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Export invoices to HTML or PDF.')
    parser.add_argument('-i', '--input_yaml', type=str, default='shaibos.yaml',
                        help='YAML file with invoices (leave empty to use shaibos.yaml)')
    parser.add_argument('-t', '--template', type=str, default=default_template_path(),
                        help='Jinja2 template for rendering the invoice '
                             '(leave empty to use basic template)')
    parser.add_argument('-o', '--output_dir', type=str, default=None,
                        help='Output directory for files (leave empty to write to '
                             '"invoices/(pdf|html)")')
    parser.add_argument('--overwrite', default=False, action='store_true',
                        help='Overwrites existing documents')
    parser.add_argument('--format', type=str, default='html',
                        help='Format of the output. Allowed options: html (default), pdf')
    args = parser.parse_args()

    output_dir = args.output_dir
    if args.format == 'html':
        if not output_dir:
            output_dir = "invoices/html/"
    elif args.format == 'pdf':
        if not output_dir:
            output_dir = "invoices/pdf/"
    else:
        raise Exception('Unsupported output format {}'.format(args.format))

    logger.debug("Using input YAML file: %s", args.input_yaml)
    logger.debug("Using Jinja2 template: %s", args.template)
    logger.debug("Writing to output path: %s", output_dir)

    if args.format == 'pdf':
        export_invoices_to_pdf(input_yaml=args.input_yaml, template=args.template,
                               output_dir=output_dir, overwrite=args.overwrite)
    elif args.format == 'html':
        export_invoices_to_html(input_yaml=args.input_yaml, template=args.template,
                                output_dir=output_dir)
