#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse

import os

try:
    import shaibos  # noqa pylint: disable=unused-import
except ImportError:
    import sys

    sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), '../'))

    import shaibos  # noqa pylint: disable=unused-import

from shaibos.util.template import default_journal_template_path
from shaibos.load.from_yaml import load_invoices_from_yaml_file
from shaibos.save.to_format import save_any
from shaibos.save.to_format import format_to_extension
from shaibos.util.log import get_logger

# ---

logger = get_logger()


def export_journals(input_yaml, year, print_totals, template, output_dir, format):
    all_invoices = load_invoices_from_yaml_file(input_yaml)
    extension = format_to_extension(format)

    all_invoices_by_activity = {}

    for invoice_number_prefix in all_invoices:
        for invoice in all_invoices[invoice_number_prefix]:
            if not invoice.has_been_paid():
                logger.warning("Invoice '%s' hasn't been marked as paid, skipping", invoice)
                continue
            if invoice.payment.date.year != year:
                continue

            activity_code = invoice.activity.evrk_code
            if activity_code not in all_invoices_by_activity:
                all_invoices_by_activity[activity_code] = []

            all_invoices_by_activity[activity_code].append(invoice)

    for evrk_code, invoices_by_activity in all_invoices_by_activity.items():
        invoices_by_activity = sorted(invoices_by_activity,
                                      key=lambda x: (x.payment_date(), x.number))

        total_taxed_income = sum(invoice.total_taxed_income for invoice in invoices_by_activity)
        data = {
            'invoices': invoices_by_activity,
            'seller': invoices_by_activity[0].seller,
            'activity': invoices_by_activity[0].activity,
            'print_totals': print_totals,
            'total_taxed_income': total_taxed_income,
            'debug_exchange_rates': False,
        }

        output_path = os.path.join(output_dir,
                                   'journal_{}_{}.{}'.format(year, evrk_code, extension))
        save_any(data, template, output_path, format)
        logger.info('Saved %s journal %s', format, output_path)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Export income journals to HTML or PDF.')
    parser.add_argument('-i', '--input_yaml', type=str, default='shaibos.yaml',
                        help='YAML file with invoices (leave empty to use shaibos.yaml)')
    parser.add_argument('-t', '--template', type=str, default=default_journal_template_path(),
                        help='Jinja2 template for rendering the journal '
                             '(leave empty to use basic template)')
    parser.add_argument('-o', '--output_dir', type=str, default=None,
                        help='Output directory for files (leave empty to write to '
                             '"invoices/(pdf|html)")')
    parser.add_argument('-y', '--year', type=int, required=True,
                        help='Year for which to print journal')
    parser.add_argument('--print_totals', default=False, action='store_true',
                        help='Whether to print totals in a separate line')
    parser.add_argument('--format', type=str, default='html',
                        help='Format of the output. Allowed options: html (default), pdf')
    args = parser.parse_args()

    output_dir = args.output_dir
    if args.format == 'html':
        if not output_dir:
            output_dir = "invoices/html/"
    elif args.format == 'pdf':
        if not output_dir:
            output_dir = "invoices/pdf/"
    else:
        raise Exception('Unsupported output format {}'.format(args.format))

    logger.debug("Using input YAML file: %s", args.input_yaml)
    logger.debug("Using Jinja2 template: %s", args.template)
    logger.debug("Writing to output path: %s", output_dir)

    if not os.path.isdir(output_dir):
        os.makedirs(output_dir)

    export_journals(args.input_yaml, args.year, args.print_totals, args.template, output_dir,
                    args.format)
